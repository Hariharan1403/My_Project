name: Salesforce Validation 
 
on:
  pull_request:
    types: [opened, synchronize]
    branches: 
      - main
      - 1stFeature-DeployChanges
      
    paths:
        - 'force-app/**'
        - 'manifest/**'
 
jobs:
  validate:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
           
      - name: 'Read PR Body'
        env:
                PR_BODY: ${{github.event.pull_request.body}}
        run: |

          FILE=./parsePR.js
          if test -f "$FILE"; then
              echo "Node.js file found. Checking which tests to run"
              echo $PR_BODY > ./pr_body.txt
              node ./parsePR.js              
              TESTS=$(cat testsToRun.txt)
              echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV    
          else
              echo "Node.js file not found. All tests will be run"
              TESTS=all
              echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
          fi    
         
      - name: Install Salesforce CLI
        run: |
                npm install -g @salesforce/cli@latest
                sf --version

      - name: 'Installing sfdx git delta'
        run: |
                  echo y | sf plugins install sfdx-git-delta
                  sf plugins
                 
      - name: 'Installing java'
        run: |
                sudo apt-get update
                sudo apt install default-jdk
                
      - name : 'Branch Name'
        run: |
                echo " Base branch: ${{ github.base_ref }}"
                echo " Current branch: ${{ github.head_ref }}"
                
      - name: 'Populate auth file with SFDX_URL secret of org'
        shell: bash
        run: |
             if [[ "${${{ github.base_ref }}}" == "main" ]]; then
                 echo "${{ secrets.SFDX_MAIN_URL }}" > ./SFDX_URL.txt
                 echo "TARGET_ORG=hariharanpec2020@gmail.com" >> $GITHUB_ENV
             elif [[ "${{ github.base_ref }}" == "1stFeature-DeployChanges" ]]; then
                 echo "${{ secrets.SFDX_MAIN_URL }}" > ./SFDX_URL.txt
                 echo "TARGET_ORG=hariharanpec2020@gmail.com" >> $GITHUB_ENV
             fi
             
      - name: 'Authenticate to Main Org'
        run: sf org login sfdx-url -f ./SFDX_URL.txt


      - name: 'Create delta packages for new, modified or deleted metadata'
        run: |
                  mkdir changed-sources
                  sf sgd:source:delta --to "HEAD" --from "HEAD^" -o changed-sources/ --generate-delta -s force-app/
       
      - name: 'Create a manifest'
        run: |
                  sf project generate manifest -p changed-sources -n manifest/deployPackage

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
                name: my-artifact-main
                path: changed-sources/

      - name: 'Validate changes/destructive changes (if any)'
        run: |
                 echo "Tests: ${{ env.APEX_TESTS }}"
                 if [ "${{ env.APEX_TESTS }}" == "all" ]; then
                    echo "Running deployment with all tests"
                          sf project deploy start --manifest manifest/deployPackage.xml --pre-destructive-changes manifest/destructiveChangesPre.xml --post-destructive-changes manifest/destructiveChangesPost.xml --dry-run --test-level RunLocalTests --target-org $TARGET_ORG -w 10 --verbose
                 elif [ "${{ env.APEX_TESTS }}" == "" ]; then
                    echo "Running deployment with no tests"
                          sf project deploy start --manifest manifest/deployPackage.xml --pre-destructive-changes manifest/destructiveChangesPre.xml --post-destructive-changes manifest/destructiveChangesPost.xml --dry-run --test-level NoTestRun --target-org $TARGET_ORG -w 10 --verbose
                 elif [[ "${{ env.APEX_TESTS }}" != "all" && "${{ env.APEX_TESTS }}" != "" ]]; then
                    echo "Running deployment with specified tests"
                          sf project deploy start --manifest manifest/deployPackage.xml --pre-destructive-changes manifest/destructiveChangesPre.xml --post-destructive-changes manifest/destructiveChangesPost.xml --dry-run --test-level RunSpecifiedTests -t ${{env.APEX_TESTS}} --target-org $TARGET_ORG -w 10 --verbose
                 fi
