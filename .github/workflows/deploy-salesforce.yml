name: Salesforce Deployment MAIN
 
on:
  push:
    branches: [ main ]
    paths:
        - 'force-app/**'
        - 'manifest/**'
 
jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get PR Info for Push
        id: pr_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "${GH_TOKEN}" | gh auth login --with-token

          # Branch where the push happened
          BASE_BRANCH="${GITHUB_REF_NAME}"

          # Find the latest merged PR that affected this branch
          PR_JSON=$(gh pr list \
            --state merged \
            --base "$BASE_BRANCH" \
            --limit 1 \
            --json headRefName,baseRefName \
            --sort updated)

          HEAD_BRANCH=$(echo "$PR_JSON" | jq -r '.[0].headRefName')
          BASE_FROM_PR=$(echo "$PR_JSON" | jq -r '.[0].baseRefName')

          # Fallback if no PR was found (direct push)
          if [ "$HEAD_BRANCH" = "null" ] || [ -z "$HEAD_BRANCH" ]; then
            HEAD_BRANCH="$BASE_BRANCH"
            BASE_FROM_PR="$BASE_BRANCH"
          fi

          echo "Base branch: $BASE_FROM_PR"
          echo "Head branch: $HEAD_BRANCH"

          # Export to environment
          echo "BASE_BRANCH=$BASE_FROM_PR" >> $GITHUB_ENV
          echo "HEAD_BRANCH=$HEAD_BRANCH" >> $GITHUB_ENV
      - name: 'Read PR Body'
        env:
                PR_BODY: ${{github.event.pull_request.body}}
        run: |

          FILE=./parsePR.js
          if test -f "$FILE"; then
              echo "Node.js file found. Checking which tests to run"
              echo $PR_BODY > ./pr_body.txt
              node ./parsePR.js              
              TESTS=$(cat testsToRun.txt)
              echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV    
          else
              echo "Node.js file not found. All tests will be run"
              TESTS=all
              echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
          fi    
         
      - name: Install Salesforce CLI
        run: |
                npm install -g @salesforce/cli@latest
                sf --version

      - name: 'Installing sfdx git delta'
        run: |
                  echo y | sf plugins install sfdx-git-delta
                  sf plugins
                 
      - name: 'Installing java'
        run: |
                sudo apt-get update
                sudo apt install default-jdk

      - name: 'Populate auth file with SFDX_URL secret of org'
        shell: bash
        run: |
                  echo ${{ secrets.SFDX_MAIN_URL}} > ./SFDX_MAIN_URL.txt

      - name: 'Authenticate to Main Org'
        run: sf org login sfdx-url -f ./SFDX_MAIN_URL.txt


      - name: 'Create delta packages for new, modified or deleted metadata'
        run: |
                  mkdir changed-sources
                  sf sgd:source:delta --to "HEAD" --from "HEAD^" -o changed-sources/ --generate-delta -s force-app/
       
      - name: 'Create a manifest'
        run: |
                  sf project generate manifest -p changed-sources -n manifest/deployPackage

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
                name: my-artifact-main
                path: changed-sources/

      - name: 'Validate changes/destructive changes (if any)'
        run: |
                 echo "Tests: ${{ env.APEX_TESTS }}"
                 if [ "${{ env.APEX_TESTS }}" == "all" ]; then
                    echo "Running deployment with all tests"
                          sf project deploy start --manifest manifest/deployPackage.xml --pre-destructive-changes manifest/destructiveChangesPre.xml --post-destructive-changes manifest/destructiveChangesPost.xml --test-level RunLocalTests --target-org hariharanpec2020@gmail.com -w 10 --verbose
                 elif [ "${{ env.APEX_TESTS }}" == "" ]; then
                    echo "Running deployment with no tests"
                          sf project deploy start --manifest manifest/deployPackage.xml --pre-destructive-changes manifest/destructiveChangesPre.xml --post-destructive-changes manifest/destructiveChangesPost.xml --test-level NoTestRun --target-org hariharanpec2020@gmail.com -w 10 --verbose
                 elif [[ "${{ env.APEX_TESTS }}" != "all" && "${{ env.APEX_TESTS }}" != "" ]]; then
                    echo "Running deployment with specified tests"
                          sf project deploy start --manifest manifest/deployPackage.xml --pre-destructive-changes manifest/destructiveChangesPre.xml --post-destructive-changes manifest/destructiveChangesPost.xml --test-level RunSpecifiedTests -t ${{env.APEX_TESTS}} --target-org hariharanpec2020@gmail.com -w 10 --verbose
                 fi
